//+build ignore

package main

import (
	"bufio"
	"debug/dwarf"
	"debug/elf"
	"os"
	"path/filepath"
	"strconv"
)

func main() {
	f, err := os.Open(filepath.Join("/", "proc", "self", "stat"))
	if err != nil {
		panic(err)
	}
	defer f.Close()

	var columns []string
	s := bufio.NewScanner(f)
	s.Split(bufio.ScanWords)
	for s.Scan() {
		columns = append(columns, s.Text())
	}
	if err := s.Err(); err != nil {
		panic(err)
	}

	parent := columns[3]

	path, err := os.Readlink(filepath.Join("/", "proc", parent, "exe"))
	if err != nil {
		panic(err)
	}

	cf, err := elf.Open(path)
	if err != nil {
		panic(err)
	}
	defer cf.Close()

	d, err := cf.DWARF()
	if err != nil {
		panic(err)
	}

	r := d.Reader()
types:
	for {
		e, err := r.Next()
		if err != nil {
			panic(err)
		}
		if e == nil && err == nil {
			break
		}
		if len(e.Field) == 0 {
			continue
		}
		var name bool
		for _, a := range e.Field {
			if a.Attr == dwarf.AttrName && a.Val == "g" {
				name = true
			}
			if name && a.Attr == dwarf.AttrType && a.Class == dwarf.ClassReference {
				t, err := d.Type(a.Val.(dwarf.Offset))
				if err != nil {
					panic(err)
				}
				if p, ok := t.(*dwarf.PtrType); ok {
					t = p.Type
				}
				if t.String() != "runtime.g" {
					continue
				}
				if d, ok := t.(*dwarf.TypedefType); ok {
					t = d.Type
				}
				if s, ok := t.(*dwarf.StructType); ok {
					if t.String() != "struct runtime.g" {
						continue
					}
					for _, sf := range s.Field {
						if sf.Name == "goid" && sf.Type.String() == "int64" {
							tf, err := os.Create("tls.s")
							if err != nil {
								panic(err)
							}
							defer tf.Close()

							_, err = tf.WriteString(`#include "textflag.h"

// This has been automatically generated by running: go run tls_gen.go
TEXT Â·goid(SB),NOSPLIT,$-8
	MOVQ TLS, AX
	MOVQ 0(AX)(TLS*1), AX
	MOVQ ` + strconv.FormatInt(sf.ByteOffset, 10) + `(AX), AX
	MOVQ AX, ret+0(FP)
	RET
`)
							if err != nil {
								panic(err)
							}
							break types
						}
					}
				}
			}
		}
	}
}
